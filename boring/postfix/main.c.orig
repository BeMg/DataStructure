#include <stdio.h>
#include <string.h>

int icp[] = {0,19,12,12,13,13,13,0};
int isp[] = {20,19,12,12,13,13,13,0};
//lparen, rparen, plus, minus, times, divide, mod, eos, operand
int top = 0;
int stack[500];


int treansfer(char *symbol) {
    switch (symbol[0]) {
    case '(':
        return 0;
    case ')':
        return 1;
    case '+':
        return 2;
    case '-':
        return 3;
    case '*':
        return 4;
    case '/':
        return 5;
    case '%':
        return 6;
    case ' ':
        return 7;
    default :
        return 8;
    }
}

void print(int token) {
    switch (token) {
    case 2:
        printf("+");
        break;
    case 3:
        printf("-");
        break;
    case 4:
        printf("*");
        break;
    case 5:
        printf("/");
        break;
    case 6:
        printf("%");
        break;
    }
}

int pop() {
    top--;
    return stack[top+1];
}

void push(int temp){
    stack[++top] = temp;
}


int main() {
    int n;
    int token;
    scanf("%d\n",&n);
    char symbol[5];
    fgets(symbol,5,stdin);
    while(n--) {
        top = 0;
        stack[top] = 7;
        while(fgets(symbol,5,stdin)!=NULL) {
            int len = strlen(symbol);
            symbol[len-1] = '\0';
            token = transfer(symbol);
            if(token == 8) {
                printf("%c",symbol[0]);
            } else if(token == 1) {
                while(stack[top]!= 0) {
                    print(pop());
                }
                pop();
            }
            else {
                while(isp[stack[top]]>=icp[token]) {
                    print(pop());
                }
                push();
            }
        }
        while((token = pop())!= 7)
            print(token);
        printf("\n");
    }
    return 0;
}
